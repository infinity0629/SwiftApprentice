import Cocoa

let stringToSearch = "Johnny Appleseed wants to change his name to John."

let searchString = "john"
let searchExpression = /john/
stringToSearch.contains(searchString)
stringToSearch.contains(searchExpression)

let flexibleExpression = /[Jj]ohn/
stringToSearch.contains(flexibleExpression)



/*
 ================================================================================================================
 正则表达式主要由两部分组成：
 1、用来描述你搜索的“字符组”。
 2、字符组的“重复形式”。
 
 例：
 /[a-z]+[0-9]+/
 [a-z]  描述了从  a  到  z  的一个字符，后面跟着  +  表示这个字符重复了一次或多次，然后从  0  到  9  的数字范围重复了一次或多次。
 ================================================================================================================
 */

/*
 ================================================================================================================
 字符组：
 
 \d ： 任何一个数字字符，可以替换 [0-9]。
 \w ：任何单个字符，是 ASCII 字母或数字的一部分，可以替换 [a-zA-Z0-9_]。
 \s ： 任何表示空白的单个字符，如空格或制表符。
 
 \D ： 非数字的任何内容。
 \W ：非字母字符、数字或下划线。
 \S ： 非空格的所有内容。
 
 [ - ] ： 字符或数字的范围，不需要指定整个字母或所有数字，可以指定所需的范围，如  [m-r]  或  [4-8]
 [ ] ： 可选择的字符集。例如， [AEIOUaeiou]  将匹配大写或小写的元音字符。
 | ：or 操作符可以做与上面元音字符示例相同的事情，比如  A|E|I|O|U|a|e|i|o|u ，它在多字符表达式中更常见，比如搜索单词的不同结尾  s|ed|ing 。
 . 字符可以匹配任何字符，使用时要小心，因为它可能会匹配到你不希望匹配到的字符。
 ================================================================================================================
 */

/*
 ================================================================================================================
 重复形式：
 
 + ：模式出现一次或多次。表达式  [a-z]+  匹配一行中的一个或多个小写字母。
 ? ：模式可以出现一次或不出现。 [a-z]?[0-9]+  表达式只匹配数字或数字后面的一个小写字符。
 * ：模式出现零次或多次。 [a-z]*[0-9]+  表达式只匹配数字或一个或多个小写字母后跟数字。
 {n,}  模式至少重复 n 次。上面的  +  也可以表示为  {1,}  和  *  是相同的  {0,} 。
 {n,m}  模式最少重复 n 次，最多重复 m 次。
 ================================================================================================================
 */

/*
 注意：正则表达式也理解文本行有开始和结束，锚字符 ^ 将确保匹配只发生在行首，而锚 $ 将只匹配行尾。
 */
